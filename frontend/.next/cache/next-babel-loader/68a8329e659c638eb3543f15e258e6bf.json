{"ast":null,"code":"var _jsxFileName = \"/home/fabian/programming_Exercises/facebook-clone/frontend/components/Posts/Post/Post.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Comment from \"../../Comment/Comment\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { LIKE_POST, ALL_POSTS, UNLIKE_POST, IS_LIKED_BY_USER } from \"../../../queries/post.query\";\n\nconst Post = props => {\n  var _props$user, _props$user2, _props$comments;\n\n  const result = useQuery(IS_LIKED_BY_USER);\n  if (result.loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 29\n    }\n  }, \" Loading... \");\n  const [like] = useMutation(LIKE_POST, {\n    refetchQueries: [{\n      query: ALL_POSTS\n    }]\n  });\n  const [unLike] = useMutation(UNLIKE_POST, {\n    refetchQueries: [{\n      query: ALL_POSTS\n    }]\n  });\n\n  const likeUnLikeButton = () => {\n    const isLikedByUser = result.data.isLikedByUser({\n      variables: {\n        id: props.id,\n        userId: localStorage.getItem(\"id\")\n      }\n    }); // const likeButton = (\n    // \t<button\n    // \t\tonClick={() =>\n    // \t\t\tlike({\n    // \t\t\t\tvariables: { id: props.id, userId: localStorage.getItem(\"id\") },\n    // \t\t\t})\n    // \t\t}\n    // \t>\n    // \t\t{\" \"}\n    // \t\tLike{\" \"}\n    // \t</button>\n    // );\n\n    const unLikeButton = __jsx(\"button\", {\n      onClick: () => unLike({\n        variables: {\n          id: props.id,\n          userId: localStorage.getItem(\"id\")\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 4\n      }\n    }, \" \", \"Unlike\", \" \");\n\n    return isLikedByUser ? likeButton : unLikeButton;\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, (_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.firstName, \" \", (_props$user2 = props.user) === null || _props$user2 === void 0 ? void 0 : _props$user2.lastName, \" \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }\n  }, props.date))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, props.content)), __jsx(\"button\", {\n    onClick: () => unLike({\n      variables: {\n        id: props.id,\n        userId: localStorage.getItem(\"id\")\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }\n  }, \" \", \"Unlike\", \" \"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }\n  }, props.likes), \" \", __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }\n  }, props === null || props === void 0 ? void 0 : (_props$comments = props.comments) === null || _props$comments === void 0 ? void 0 : _props$comments.map(comment => {\n    __jsx(Comment, {\n      firstName: comment.firstName,\n      lastName: comment.lastName,\n      content: comment.content,\n      date: comment.date,\n      likes: comment.likes,\n      comments: comment.comments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }\n    });\n  })));\n};\n\nexport default Post;","map":{"version":3,"sources":["/home/fabian/programming_Exercises/facebook-clone/frontend/components/Posts/Post/Post.tsx"],"names":["React","Comment","useMutation","useQuery","LIKE_POST","ALL_POSTS","UNLIKE_POST","IS_LIKED_BY_USER","Post","props","result","loading","like","refetchQueries","query","unLike","likeUnLikeButton","isLikedByUser","data","variables","id","userId","localStorage","getItem","unLikeButton","likeButton","user","firstName","lastName","date","content","likes","comments","map","comment"],"mappings":"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","sourcesContent":["import React, { FC } from \"react\";\nimport Comment, { IComment } from \"../../Comment/Comment\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport {\n\tLIKE_POST,\n\tALL_POSTS,\n\tUNLIKE_POST,\n\tIS_LIKED_BY_USER,\n} from \"../../../queries/post.query\";\n\nexport interface IPost {\n\tid: string;\n\tuser?: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t};\n\tfirstName: string;\n\tlastName: string;\n\tdate: string;\n\tcontent: string;\n\tlikes: number;\n\tcomments: IComment[];\n}\n\nconst Post = (props: IPost): JSX.Element => {\n\tconst result = useQuery(IS_LIKED_BY_USER);\n\tif (result.loading) return <div> Loading... </div>;\n\n\tconst [like] = useMutation(LIKE_POST, {\n\t\trefetchQueries: [{ query: ALL_POSTS }],\n\t});\n\tconst [unLike] = useMutation(UNLIKE_POST, {\n\t\trefetchQueries: [{ query: ALL_POSTS }],\n\t});\n\n\tconst likeUnLikeButton = () => {\n\t\tconst isLikedByUser = result.data.isLikedByUser({\n\t\t\tvariables: { id: props.id, userId: localStorage.getItem(\"id\") },\n\t\t});\n\n\t\t// const likeButton = (\n\t\t// \t<button\n\t\t// \t\tonClick={() =>\n\t\t// \t\t\tlike({\n\t\t// \t\t\t\tvariables: { id: props.id, userId: localStorage.getItem(\"id\") },\n\t\t// \t\t\t})\n\t\t// \t\t}\n\t\t// \t>\n\t\t// \t\t{\" \"}\n\t\t// \t\tLike{\" \"}\n\t\t// \t</button>\n\t\t// );\n\n\t\tconst unLikeButton = (\n\t\t\t<button\n\t\t\t\tonClick={() =>\n\t\t\t\t\tunLike({\n\t\t\t\t\t\tvariables: { id: props.id, userId: localStorage.getItem(\"id\") },\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{\" \"}\n\t\t\t\tUnlike{\" \"}\n\t\t\t</button>\n\t\t);\n\n\t\treturn isLikedByUser ? likeButton : unLikeButton;\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<h4>\n\t\t\t\t\t{props.user?.firstName} {props.user?.lastName}{\" \"}\n\t\t\t\t\t<span>{props.date}</span>\n\t\t\t\t</h4>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>{props.content}</p>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\tonClick={() =>\n\t\t\t\t\tunLike({\n\t\t\t\t\t\tvariables: { id: props.id, userId: localStorage.getItem(\"id\") },\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{\" \"}\n\t\t\t\tUnlike{\" \"}\n\t\t\t</button>\t\n\t\t\t<div>{props.likes}</div>{\" \"}\n\t\t\t<div>\n\t\t\t\t{props?.comments?.map((comment: IComment) => {\n\t\t\t\t\t<Comment\n\t\t\t\t\t\tfirstName={comment.firstName}\n\t\t\t\t\t\tlastName={comment.lastName}\n\t\t\t\t\t\tcontent={comment.content}\n\t\t\t\t\t\tdate={comment.date}\n\t\t\t\t\t\tlikes={comment.likes}\n\t\t\t\t\t\tcomments={comment.comments}\n\t\t\t\t\t/>;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}