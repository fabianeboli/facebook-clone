{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { createStore } from \"redux\"; // import { composeWithDevTools } from \"redux-devtools-extension\";\n//import thunkMiddleware from \"redux-thunk\";\n\nimport reducers from \"./reducers/reducers\";\nvar store;\n\nfunction initStore(initialState) {\n  return createStore(reducers, initialState //\tcomposeWithDevTools(applyMiddleware(thunkMiddleware))\n  );\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/home/fabian/programming_Exercises/facebook-clone/frontend/store.ts"],"names":["useMemo","createStore","reducers","store","initStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA6C,OAA7C,C,CACA;AACA;;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,IAAIC,KAAJ;;AAEA,SAASC,SAAT,CAAmBC,YAAnB,EAAiC;AAChC,SAAOJ,WAAW,CACjBC,QADiB,EAEjBG,YAFiB,CAGjB;AAHiB,GAAlB;AAKA;;AAED,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAoB;AAAA;;AAClD,MAAIC,MAAM,cAAGL,KAAH,6CAAYC,SAAS,CAACG,cAAD,CAA/B,CADkD,CAGlD;AACA;;;AACA,MAAIA,cAAc,IAAIJ,KAAtB,EAA6B;AAC5BK,IAAAA,MAAM,GAAGJ,SAAS,iCACdD,KAAK,CAACM,QAAN,EADc,GAEdF,cAFc,EAAlB,CAD4B,CAK5B;;AACAJ,IAAAA,KAAK,GAAGO,SAAR;AACA,GAZiD,CAclD;;;AACA,aAAmC,OAAOF,MAAP,CAfe,CAgBlD;;AACA,MAAI,CAACL,KAAL,EAAYA,KAAK,GAAGK,MAAR;AAEZ,SAAOA,MAAP;AACA,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AAAA;;AACtC,MAAMF,KAAK,GAAGH,OAAO,CAAC;AAAA,WAAMM,eAAe,CAACD,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOF,KAAP;AACA;;GAHeQ,Q","sourcesContent":["import { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n//import thunkMiddleware from \"redux-thunk\";\nimport reducers from \"./reducers/reducers\";\n\nlet store;\n\nfunction initStore(initialState) {\n\treturn createStore(\n\t\treducers,\n\t\tinitialState\n\t\t//\tcomposeWithDevTools(applyMiddleware(thunkMiddleware))\n\t);\n}\n\nexport const initializeStore = (preloadedState) => {\n\tlet _store = store ?? initStore(preloadedState);\n\n\t// After navigating to a page with an initial Redux state, merge that state\n\t// with the current state in the store, and create a new store\n\tif (preloadedState && store) {\n\t\t_store = initStore({\n\t\t\t...store.getState(),\n\t\t\t...preloadedState,\n\t\t});\n\t\t// Reset the current store\n\t\tstore = undefined;\n\t}\n\n\t// For SSG and SSR always create a new store\n\tif (typeof window === \"undefined\") return _store;\n\t// Create the store once in the client\n\tif (!store) store = _store;\n\n\treturn _store;\n};\n\nexport function useStore(initialState) {\n\tconst store = useMemo(() => initializeStore(initialState), [initialState]);\n\treturn store;\n}\n"]},"metadata":{},"sourceType":"module"}