{"ast":null,"code":"var _jsxFileName = \"/home/fabian/programming_Exercises/facebook-clone/frontend/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../styles/globals.css\";\nimport React from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider, split } from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { setContext } from \"apollo-link-context\";\nimport { Provider } from \"react-redux\";\nimport { useStore } from \"../store\"; //import { WebSocketLink } from \"@apollo/link-ws\";\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(\"user\");\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token && `bearer ${token}`\n    })\n  };\n});\nconst httpLink = new HttpLink({\n  url: \"http://localhost:4000\"\n});\nconst wsLink = new WebSocketLink({\n  url: \"ws://localhost:4000/graphql\",\n  option: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, //\twsLink,\nauthLink.concat(httpLink));\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  // eslint-disable-next-line react/prop-types\n  const store = useStore(pageProps.initialReduxStore);\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  }, __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }))));\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/home/fabian/programming_Exercises/facebook-clone/frontend/pages/_app.tsx"],"names":["React","ApolloClient","HttpLink","InMemoryCache","ApolloProvider","split","getMainDefinition","setContext","Provider","useStore","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","url","wsLink","WebSocketLink","option","reconnect","splitLink","query","definition","kind","operation","concat","client","cache","link","MyApp","Component","pageProps","store","initialReduxStore"],"mappings":";;;;;;;;;;;AAAA,OAAO,uBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACCC,YADD,EAECC,QAFD,EAGCC,aAHD,EAICC,cAJD,EAKCC,KALD,QAMO,gBANP;AAOA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,QAAT,QAAyB,UAAzB,C,CACA;;AAEA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC/C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAd;AACA,SAAO;AACNH,IAAAA,OAAO,kCACHA,OADG;AAENI,MAAAA,aAAa,EAAEH,KAAK,IAAK,UAASA,KAAM;AAFlC;AADD,GAAP;AAMA,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIf,QAAJ,CAAa;AAAEgB,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIC,aAAJ,CAAkB;AAChCF,EAAAA,GAAG,EAAE,6BAD2B;AAEhCG,EAAAA,MAAM,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFwB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGlB,KAAK,CACtB,CAAC;AAAEmB,EAAAA;AAAF,CAAD,KAAe;AACd,QAAMC,UAAU,GAAGnB,iBAAiB,CAACkB,KAAD,CAApC;AACA,SACCC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF1B;AAIA,CAPqB,EAQtB;AACAjB,QAAQ,CAACkB,MAAT,CAAgBX,QAAhB,CATsB,CAAvB;AAYA,MAAMY,MAAM,GAAG,IAAI5B,YAAJ,CAAiB;AAC/B6B,EAAAA,KAAK,EAAE,IAAI3B,aAAJ,EADwB;AAE/B4B,EAAAA,IAAI,EAAER;AAFyB,CAAjB,CAAf;;AAKA,MAAMS,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA2C;AACxD;AACA,QAAMC,KAAK,GAAG1B,QAAQ,CAACyB,SAAS,CAACE,iBAAX,CAAtB;AAEA,SACC,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,SAAD,eAAeK,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADD,CADD;AAOA,CAXD;;AAaA,eAAeF,KAAf","sourcesContent":["import \"../styles/globals.css\";\nimport React from \"react\";\nimport {\n\tApolloClient,\n\tHttpLink,\n\tInMemoryCache,\n\tApolloProvider,\n\tsplit,\n} from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { setContext } from \"apollo-link-context\";\nimport { Provider } from \"react-redux\";\nimport { useStore } from \"../store\";\n//import { WebSocketLink } from \"@apollo/link-ws\";\n\nconst authLink = setContext((_, { headers }) => {\n\tconst token = localStorage.getItem(\"user\");\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token && `bearer ${token}`,\n\t\t},\n\t};\n});\n\nconst httpLink = new HttpLink({ url: \"http://localhost:4000\" });\n\nconst wsLink = new WebSocketLink({\n\turl: \"ws://localhost:4000/graphql\",\n\toption: {\n\t\treconnect: true,\n\t},\n});\n\nconst splitLink = split(\n\t({ query }) => {\n\t\tconst definition = getMainDefinition(query);\n\t\treturn (\n\t\t\tdefinition.kind === \"OperationDefinition\" &&\n\t\t\tdefinition.operation === \"subscription\"\n\t\t);\n\t},\n\t//\twsLink,\n\tauthLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n\tcache: new InMemoryCache(),\n\tlink: splitLink,\n});\n\nconst MyApp = ({ Component, pageProps }): JSX.Element => {\n\t// eslint-disable-next-line react/prop-types\n\tconst store = useStore(pageProps.initialReduxStore);\n\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<Component {...pageProps} />\n\t\t\t</ApolloProvider>\n\t\t</Provider>\n\t);\n};\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}